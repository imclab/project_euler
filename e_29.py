#!/usr/bin/env python 
'''
Created on 7 feb. 2012

@author: Julien Lengrand-Lambert

DESCRIPTION: Solves problem 29 of Project Euler
Consider all integer combinations of a^b for 2<=a<=5 and 2<=b<=5:

2^2=4, 2^3=8,2^4=16, 2^5=32
3^2=9, 3^3=27, 3^4=81,3^5=243
4^2=16, 4^3=64, 4^4=256, 4^5=1024
5^2=25, 5^3=125, 5^4=625, 5^5=3125
If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:

4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125

How many distinct terms are in the sequence generated by a^b for 2<=a<=100 and 2<=b<=100?
''' 
def integer_combinations(a_max, b_max):
    """
    Returns a list of all integer combinations of a^b for 2<=a<=5 and 2<=b<=5
    """
    olist = []
    for a in range(2, a_max + 1):
        for b in range(2, b_max + 1):
            olist.append(a**b)

    return olist

def sort_n_short(olist):
    """
    Sort elements of olist and remove all duplicates.
    """
    return sorted(set(olist))

if __name__ == '__main__':    
    print "Answer : %d " % (len(sort_n_short(integer_combinations(100, 100))))